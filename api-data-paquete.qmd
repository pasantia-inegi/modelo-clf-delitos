---
# title: "Capacitación en R y herramientas de productividad"
# author: "Abril 2021"
format:
  # html:
  #   code-fold: true
  revealjs:
    auto-stretch: false
    margin: 0
    slide-number: true
    scrollable: true
    preview-links: auto
    page-layout: custom
    logo: imagenes/logo_portada2.png
    css: ine_quarto_styles.css
    # footer: <https://quarto.org>
engine: knitr
---

#

<!---
# TODO: this does not work
 .linea-superior[]
.linea-inferior[] 
--->

<!---
# TODO: this does not work
 ![](imagenes/logo_portada2.png){.center style="width: 20%;"}   
--->

[]{.linea-superior} 
[]{.linea-inferior} 


<!---
 <img src="imagenes/logo_portada2.png" style="width: 20%"/>  
--->

[<img src="imagenes/logo_portada2.png" width="20%"/> ]{.center-justified}


[**Proyecto Ciencia de Datos**]{.big-par .center-justified}

[**Proyecto: API inedata y paquetes asociados**]{.big-par .center-justified}

[**octubre 2023**]{.big-par .center-justified}


## Temario

1. Componentes del proyecto
2. ¿Qué es una API?
3. API inedata
4. API en acción
4. Paquete dataine


## Componentes del proyecto

- API (80% ok)

- Paquete en R (95% ok)

- Paquete en Python (0% )




## ¿Qué es una API?



::: {.incremental}
- Las APIs (_Application Programming Interface_) son piezas de código que permiten que dos aplicaciones o computadoras se comuniquen.

- Se podría decir que la API es un intermediario que permite a que un programa le pida cosas específicas a otro programa, sin necesidad 
de conocer en detalle cómo funciona este otro.


- En la práctica, nos permiten acceder desde un programa en nuestro computador -como Python o R- a los datos de algún servicio, al que de otra manera no tendríamos acceso o bien tendríamos que hacerlo pasando por la página web, lo que implica un proceso más costoso para el usuario y para el proveedor.

- Ejemplos clásicos de APIs son: API de twitter para recolectar tuits, iniciar sesión con Google, API de la CMF para valor UF, monedas extranjeras, IPC, etc.
:::

## ¿Qué es una API?

::::{.columns}

:::{.column style='flex: 0.45' .medium-par} 
La analogía del restaurant es práctica para entender la lógica de las API:

- El usuario/a sería el cliente
- La API sería la mesera
- La información que nos puede disponibilizar la API es el menú
- Los servidores con sus bases de datos serían la cocina

:::


:::{.column style='flex: 0.45' .medium-par} 
Por lo tanto:

- El usuario le pide a la API una información específica (el plato) en base a lo disponible 
en el menú. Luego, los servidores/cocina se encargan de obtener esa información desde las
bases de datos y finalmente la API le entrega el plato/información al usuario, si es que este es
parte del menú.
:::

::::

[<img src="imagenes/api_restaurant.webp" width="60%" />]{.center}


## ¿Qué es una API?

<img src="imagenes/rest-api.jpg" width="100%" style="float: right;" />




## Uso y motivación

:::{.incremental .medium-par}
- La API del INE da acceso directo a las tablas publicadas por el INE, evitándole a sus usuarios pasar
por la página web, además de entregar información como nombres de las columnas e
información descriptiva de las tablas.
  - Actualmente se encuentran disponibles EPF, ENUSC, ESI y ENE
  
- La idea de su creación es facilitar el acceso a datos a usuarios más avanzados, que conocen este tipo de herramientas.

- El paquete, además, permite acceder a la API en un formato más familiar, que sea cómodo para usuarios y usuarias de nivel intermedio
:::

## La API inedata

:::{.incremental .medium-par}

- La API está compuesta por 4 _endpoints_ principales
  - Un _endpoint_ es una ruta dentro de la API que tiene asignada una tarea específica
  
- Estos son:
  - `/data`: Se ingresa `.json` que contiene la encuesta y versión y opcionalmente una lista de columnas. Si no se ingresa lista de columnas devuelve tabla con todas sus columnas, caso contrario se filtran columnas. Esta se devuelve en formato `.json`
    - `.json` es una forma estándar y flexible de dar formato y estructura a los datos, facilitando su transmisión
:::


:::: {.r-stack}
::: {.fragment .fade-in-then-out }
Uso:

  <p align="center">
  
::::{.columns}

:::{.column style='flex: 0.3' } 
  <img src="imagenes/get_data_curl.png" style="width:100%; margin-right:20px;"  />
:::

:::{.column style='flex: 0.3' } 
  <img src="imagenes/get_data_python.png"style="width:100%; margin-right:20px;" />
:::

:::{.column style='flex: 0.3' } 
  <img src="imagenes/get_data_r.png"style="width:100%; margin-right:20px;" />
:::

::::
</p>
:::

::: {.fragment .fade-in-then-out }
Resultado:

<img src="imagenes/output_get_data.png" width="65%" />

:::    

::::
## La API inedata


::: {.medium-par}
- La API está compuesta por 4 _endpoints_ principales
  - Un _endpoint_ es una ruta dentro de la API que tiene asignada una tarea específica
  
- Estos son:

  - `/colnames`: se le entrega un dataset y una versión y a cambio entrega las columnas de esa tabla.


:::


::: {.fragment}
Uso:

     http://127.0.0.1:8000/colnames?dataset=epf_gastos&version=viii


:::

::: {.fragment}
Resultado:

     {"data":["index","ï»¿ZONA","FOLIO_V","FOLIO","FE","VARSTRAT","VARUNIT","CCIF","D","G","C","SC","P","GASTO","GLOSA"]}


:::
    

## La API inedata


::: {.medium-par}
- La API está compuesta por 4 _endpoints_ principales
  - Un _endpoint_ es una ruta dentro de la API que tiene asignada una tarea específica
  
- Estos son:

  - `/info`: entrega información descriptiva de las tablas disponibles. Opcionalmente se puede ingresar una encuesta para filtrar, obteniendo la información de las tablas asociadas a esa encuesta


:::

::: {.fragment}
Uso:

     http://127.0.0.1:8000/info?dataset_filter=epf_gastos


:::

::: {.fragment}
Resultado:

     "[{\"survey\":\"epf_gastos\",\"version\":\"vii\",\"n_row\":641938,\"n_col\":12,\"file_size\":32763938},{\"survey\":\"epf_gastos\",\"version\":\"viii\",\"n_row\":1064239,\"n_col\":15,\"file_size\":85938002}]"


:::
   

## La API inedata


::: {.medium-par}
- La API está compuesta por 4 _endpoints_ principales
  - Un _endpoint_ es una ruta dentro de la API que tiene asignada una tarea específica
  
- Estos son:

  - `/uploadfile`: permite subir tablas nuevas, que podrán ser consultadas en un futuro.
    - Solo para administradores de la API.
    - Es posible que este _endpoint_ cambie considerablemente.


:::

::: {.fragment}
UI al ingresar al endpoint:

<img src="imagenes/uploadfile.png" style="width:60%; margin-right:20px;" />

:::

## API en acción

Al entrar a la URL, se nos envía directamente a la documentación, que, junto con explicar cada _endpoint_
nos permite probarlos.

Probemos la api!




## Paquete dataine

El paquete dataine se conecta a la API y facilita la descarga de datos desde el código de R

. . .

**posee cuatro funciones principales:**

:::{.incremental .medium-par}

- get_catalog()

- get_columns()

- get_data()

- get_many_data()

:::

## Principales funciones


**get_catalog()**

:::{.incremental .medium-par}

- Nos permite obtener el catálogo de encuestas cargadas en la API

- Posee el parámetro **dataset** para traer solamente los datos de una encuesta en específico

- Veamos como funciona

:::

. . .

**get_columns()**

:::{.incremental .medium-par}

- Nos permite obtener los nombres de las variables de alguna encuesta

- Posee dos parámetros obligatorios, **dataset** y **version** para traer los nombres específicos

- Veamos como funciona

:::



## Principales funciones


**get_data()**

:::{.incremental .medium-par}

- Es la función principal, nos permite traer *un* dataset de una encuesta en específico

- Posee cuatro parámetros: **dataset**, **version**, **col_list** y **save_where**

- **col_list**: nos permite traer solo algunas variables del dataset, lo que alivia mucho la descarga (funciona desde el request a la api)

- **save_where**: Este parametro nos permite definir donde se almacenará el dataset descargado, tiene 4 opciones:

  + Si seteamos como **"renviron"** almacena solo en la memoria del ambiente de R, (tiene un warning y prompt para cuidar la memoria ram)

  + Si seteamos como **"disk"**, almacenará en un directorio llamado ***data/*** en el Working directory, pero no en el ambiente de R

  + Si seteamos **"both"**, se almacena en ambas partes
  
  - Finalmente, si seteamos **no_message**, se apagará el _warning_ y prompt, los datos se cargarán en el ambiente de R, **!!bajo su responsabilidad¡¡**
  
  
- Veamos como funciona  

:::

## Principales funciones


**get_many_data()**

:::{.incremental .medium-par}

- Es una función *wrapper* de **get_data**, que nos permite traer multiples versiones de un dataset en una sola función

- Posee seis parámetros: **dataset**, **from**, **to**, **col_list**, **save_where**, **memory_warning_limit**

- **to** y **from**: nos permiten llamar a un rango de versiones, generando un vector internamente

- **memory_warning_limit**: permite setear el limite de memoria que gatilla el warning, al descargar en la memoria de R

- Veamos como funciona

:::


## Pasos a seguir

:::{.incremental }

- Prepararación para apertura al público (seguridad, conversaciones con SDTI)
- Ampliar el número de productos disponibles
- Incluir datos de series de tiempo de indicadores económicos (desempleo, IPC, etc)
- Reformar el método de subida de datos nuevos  y su autentificación
- Replicar el paquete dataine en Python

:::



#

[]{.linea-superior} 
[]{.linea-inferior} 

<img src="imagenes/logo_portada2.png" width="20%"/>  


[**Proyecto Ciencia de Datos**]{.big-par .center-justified}

[**API inedata y paquetes asociados**]{.big-par .center-justified}

[**Octubre 2023**]{.big-par .center-justified}


